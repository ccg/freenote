// Generated by CoffeeScript 1.4.0
(function() {

  describe("The Note Panel", function() {
    var createComponentTestArea, view, viewController;
    view = null;
    viewController = null;
    createComponentTestArea = function() {
      var node;
      if (Ext.get("componentTestArea") != null) {
        node = Ext.get("componentTestArea").dom;
        Ext.removeNode(node);
      }
      return Ext.DomHelper.append(Ext.getBody(), "<div id='componentTestArea' style='visibility: hidden'></div>");
    };
    beforeEach(function() {
      createComponentTestArea();
      view = Ext.create("App.view.NotePanel", {
        renderTo: "componentTestArea"
      });
      return viewController = view.getController();
    });
    afterEach(function() {
      view.destroy();
      view = null;
      return viewController = null;
    });
    describe("After a successful startup, the Note panel view", function() {
      it("is defined", function() {
        return expect(view).toBeDefined();
      });
      it("has been rendered", function() {
        return expect(view.rendered).toBeTruthy();
      });
      return it("is an instance of App.view.NotePanel", function() {
        return expect(view instanceof App.view.NotePanel).toBeTruthy();
      });
    });
    describe("After a successful startup, the Note Panel View Controller", function() {
      it("is defined", function() {
        return expect(viewController).toBeDefined();
      });
      it("is an instance of App.controller.NotePanelViewController", function() {
        return expect(viewController instanceof App.controller.NotePanelViewController).toBeTruthy();
      });
      it("has a reference to the correct Note Panel view instance", function() {
        return expect(viewController.getView() === view).toBeTruthy();
      });
      return it("has a reference to the global messageBus", function() {
        return expect(viewController.getMessageBus()).toBeTruthy();
      });
    });
    describe("the Note Panel View Controller", function() {
      return it("can change the Note Panel's title", function() {
        var testTitle;
        testTitle = "New Test Title";
        expect(view.title).not.toEqual(testTitle);
        viewController.setTitle(testTitle);
        return expect(view.title).toEqual(testTitle);
      });
    });
    return describe("when it hears a 'noteselected' event on the message bus", function() {
      var messageBus, noteListStore;
      messageBus = null;
      noteListStore = null;
      beforeEach(function() {
        messageBus = viewController.getMessageBus();
        return noteListStore = Deft.Injector.resolve('noteListStore');
      });
      return it("changes the title to the note's title", function() {
        var noteRecord, noteTitle;
        noteRecord = noteListStore.getById(1);
        noteTitle = noteRecord.get('title');
        expect(view.title).not.toEqual(noteTitle);
        messageBus.fireEvent('noteselected', noteRecord);
        return expect(view.title).toEqual(noteTitle);
      });
    });
  });

}).call(this);
